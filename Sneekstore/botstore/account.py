import logging
from aiogram import F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º
class PaymentStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_crypto_amount = State()

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø–ª–∞—Ç–µ–∂—ñ
pending_payments = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç—É
def get_account_menu():
    kb = [
        [InlineKeyboardButton(text="–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
def get_topup_menu():
    kb = [
        [
            InlineKeyboardButton(text="–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é", callback_data="topup_crypto"),
            InlineKeyboardButton(text="–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–æ—é", callback_data="topup_card")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="account")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∞–∫–∫–∞—É–Ω—Ç—É
def register_account_handlers(dp, db, bot):
    
    # –ü–æ–∫–∞–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫–∫–∞—É–Ω—Ç
    @dp.callback_query(F.data == "account")
    async def process_account(callback_query):
        user_id = callback_query.from_user.id
        user_name = callback_query.from_user.first_name or callback_query.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ê–∫–∫–∞—É–Ω—Ç'")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        account = await db.get_account(user_id)
        balance = account["balance"]
        purchases = account["purchases"]
        
        try:
            await callback_query.message.delete()
        except Exception:
            pass
        await callback_query.message.answer(
            f"üë§ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
            f"–Ü–º'—è: <b>{user_name}</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance} –≥—Ä–Ω</b>\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫: <b>{purchases}</b>",
            parse_mode="HTML",
            reply_markup=get_account_menu()
        )

    # –í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    @dp.callback_query(F.data == "topup_balance")
    async def process_topup_balance(callback_query):
        await callback_query.answer()
        try:
            await callback_query.message.delete()
        except Exception:
            pass
        await callback_query.message.answer(
            "üí≥ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:</b>",
            parse_mode="HTML",
            reply_markup=get_topup_menu()
        )

    # –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ—é - –∑–∞–ø–∏—Ç —Å—É–º–∏
    @dp.callback_query(F.data == "topup_card")
    async def process_topup_card(callback_query, state: FSMContext):
        await callback_query.answer()
        try:
            await callback_query.message.delete()
        except Exception:
            pass
        await callback_query.message.answer(
            "üí≥ <b>–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ—é</b>\n"
            "\n"
            "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (—É –≥—Ä–∏–≤–Ω—è—Ö):\n"
            "\n"
            "<i>–ü—Ä–∏–∫–ª–∞–¥: 500</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="topup_balance")]
            ])
        )
        await state.set_state(PaymentStates.waiting_for_amount)

    # –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é - –∑–∞–ø–∏—Ç —Å—É–º–∏
    @dp.callback_query(F.data == "topup_crypto")
    async def process_topup_crypto(callback_query, state: FSMContext):
        await callback_query.answer()
        try:
            await callback_query.message.delete()
        except Exception:
            pass
        await callback_query.message.answer(
            "ü™ô <b>–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é</b>\n"
            "\n"
            "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (—É –≥—Ä–∏–≤–Ω—è—Ö):\n"
            "\n"
            "<i>–ü—Ä–∏–∫–ª–∞–¥: 500</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="topup_balance")]
            ])
        )
        await state.set_state(PaymentStates.waiting_for_crypto_amount)

    # –û–±—Ä–æ–±–∫–∞ —Å—É–º–∏ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ—é
    @dp.message(PaymentStates.waiting_for_amount)
    async def process_payment_amount(message: Message, state: FSMContext):
        try:
            amount = float(message.text)
            if amount <= 0:
                await message.answer("‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
                return
                
            user_id = message.from_user.id
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –∑ –≤–∫–∞–∑–∞–Ω–Ω—è–º –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏
            order_id = await db.create_payment_order(user_id, amount, payment_method='card')
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
            pending_payments[order_id] = {
                "user_id": user_id,
                "amount": amount,
                "username": message.from_user.first_name or message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            }
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–æ—é
            payment_info = (
                f"üí≥ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –æ–ø–ª–∞—Ç–∏</b>\n"
                f"\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                f"üí∞ –°—É–º–∞: <b>{amount:.0f} –≥—Ä–Ω</b>\n"
                f"\n"
                f"üí≥ <b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:</b>\n"
                f"–ö–∞—Ä—Ç–∫–∞: <code>4444 4444 4444 4444</code>\n"
                f"–û—Ç—Ä–∏–º—É–≤–∞—á: –Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á\n"
                f"–ë–∞–Ω–∫: –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫\n"
                f"\n"
                f"‚ùóÔ∏è <b>–í–∞–∂–ª–∏–≤–æ:</b>\n"
                f"‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ\n"
                f"‚Ä¢ –°—É–º–∞ –º–∞—î —Ç–æ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π\n"
                f"‚Ä¢ –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data=f"paid_{order_id}")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="topup_balance")]
            ])
            
            await message.answer(payment_info, parse_mode="HTML", reply_markup=keyboard)
            await state.clear()
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É —á–∏—Å–ª–æ–º!")

    # –û–±—Ä–æ–±–∫–∞ —Å—É–º–∏ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é
    @dp.message(PaymentStates.waiting_for_crypto_amount)
    async def process_crypto_payment_amount(message: Message, state: FSMContext):
        try:
            amount = float(message.text)
            if amount <= 0:
                await message.answer("‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
                return
                
            user_id = message.from_user.id
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑ –≤–∫–∞–∑–∞–Ω–Ω—è–º –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏
            order_id = await db.create_payment_order(user_id, amount, payment_method='crypto')
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –ø–∞–º'—è—Ç—ñ
            pending_payments[order_id] = {
                "user_id": user_id,
                "amount": amount,
                "username": message.from_user.first_name or message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π",
                "payment_type": "crypto"
            }
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ USDT
            usd_amount = amount / 41
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂—É
            payment_info = (
                f"ü™ô <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é</b>\n"
                f"\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                f"üí∞ –°—É–º–∞: <b>{amount:.0f} –≥—Ä–Ω</b>\n"
                f"üíµ –°—É–º–∞ –≤ USDT: <b>{usd_amount:.2f} USDT</b>\n"
                f"\n"
                f"ü™ô <b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:</b>\n"
                f"–ú–µ—Ä–µ–∂–∞: <code>TRC20 (Tron)</code>\n"
                f"–ê–¥—Ä–µ—Å–∞: <code>TQRKqHvdqwdGTELjFUzYzVqhxMtaworR3a</code>\n"
                f"–í–∞–ª—é—Ç–∞: <code>USDT</code>\n"
                f"\n"
                f"‚ùóÔ∏è <b>–í–∞–∂–ª–∏–≤–æ:</b>\n"
                f"‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—ñ–ª—å–∫–∏ USDT –ø–æ –º–µ—Ä–µ–∂—ñ TRC20\n"
                f"‚Ä¢ –°—É–º–∞ –º–∞—î —Ç–æ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –≤ USDT\n"
                f"‚Ä¢ –ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ\n"
                f"‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –≤—ñ–¥–ø—Ä–∞–≤–∏–≤", callback_data=f"crypto_paid_{order_id}")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="topup_balance")]
            ])
            
            await message.answer(payment_info, parse_mode="HTML", reply_markup=keyboard)
            await state.clear()
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É —á–∏—Å–ª–æ–º!")

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–æ—é
    @dp.callback_query(F.data.startswith("paid_"))
    async def process_payment_confirmation(callback_query):
        order_id = callback_query.data.split("_", 1)[1]
        user_id = callback_query.from_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞—è–≤–∫—É
        order = await db.get_payment_order(order_id)
        if not order or order["user_id"] != user_id:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        if order["status"] != "pending":
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")
            return
        
        await callback_query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞!")
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n"
            f"\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
            f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
            f"\n"
            f"‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–ó–∞–∑–≤–∏—á–∞–π –æ–±—Ä–æ–±–∫–∞ –∑–∞–π–º–∞—î –¥–æ 30 —Ö–≤–∏–ª–∏–Ω.\n"
            f"üì± –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        admins = await db.get_admins()
        user_info = pending_payments.get(order_id, {})
        username = user_info.get("username", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
        
        admin_message = (
            f"üí≥ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ—é!</b>\n"
            f"\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username}\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
            f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
            f"\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–ø–ª–∞—Ç—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –∞–±–æ –≤—ñ–¥—Ö–∏–ª—ñ—Ç—å –∑–∞—è–≤–∫—É:"
        )
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{order_id}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{order_id}")
            ]
        ])
        
        for admin_id in admins:
            try:
                await bot.send_message(admin_id, admin_message, parse_mode="HTML", reply_markup=admin_keyboard)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º –ø–ª–∞—Ç–µ–∂—É –∫–∞—Ä—Ç–æ—é
    @dp.callback_query(F.data.startswith("approve_"))
    async def approve_payment(callback_query):
        order_id = callback_query.data.split("_", 1)[1]
        
        success = await db.approve_payment(order_id)
        if success:
            order = await db.get_payment_order(order_id)
            if order:
                payment_type = "–∫–∞—Ä—Ç–∫–æ—é" if order.get('payment_method') == 'card' else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é"
                await callback_query.answer("‚úÖ –ü–ª–∞—Ç—ñ–∂ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
                await callback_query.message.edit_text(
                    f"‚úÖ <b>–ü–ª–∞—Ç—ñ–∂ {payment_type} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</b>\n"
                    f"\n"
                    f"üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                    f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                    f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <code>{order['user_id']}</code>\n"
                    f"\n"
                    f"–ö–æ—à—Ç–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
                    parse_mode="HTML"
                )
                
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                try:
                    await bot.send_message(
                        order["user_id"],
                        f"üéâ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ!</b>\n"
                        f"\n"
                        f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                        f"üí∞ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Å—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                        f"üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {payment_type}\n"
                        f"\n"
                        f"–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è! –ö–æ—à—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –ø–æ–∫—É–ø–æ–∫.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {order['user_id']}: {e}")
            else:
                await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        else:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")

    # –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º –ø–ª–∞—Ç–µ–∂—É –∫–∞—Ä—Ç–æ—é
    @dp.callback_query(F.data.startswith("reject_"))
    async def reject_payment(callback_query):
        order_id = callback_query.data.split("_", 1)[1]
        
        await db.reject_payment(order_id)
        order = await db.get_payment_order(order_id)
        
        if order:
            payment_type = "–∫–∞—Ä—Ç–∫–æ—é" if order.get('payment_method') == 'card' else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é"
            await callback_query.answer("‚ùå –ü–ª–∞—Ç—ñ–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!")
            await callback_query.message.edit_text(
                f"‚ùå <b>–ü–ª–∞—Ç—ñ–∂ {payment_type} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!</b>\n"
                f"\n"
                f"üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <code>{order['user_id']}</code>\n"
                f"\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞.",
                parse_mode="HTML"
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            try:
                await bot.send_message(
                    order["user_id"],
                    f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è {payment_type} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞</b>\n"
                    f"\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                    f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                    f"\n"
                    f"–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
                    f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∞\n"
                    f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞\n"
                    f"‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ –Ω–æ–º–µ—Ä–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                    f"–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: @vktrysn",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {order['user_id']}: {e}")
        else:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é
    @dp.callback_query(F.data.startswith("crypto_paid_"))
    async def process_crypto_payment_confirmation(callback_query):
        order_id = callback_query.data.split("_", 2)[2]
        user_id = callback_query.from_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞—è–≤–∫—É
        order = await db.get_payment_order(order_id)
        if not order or order["user_id"] != user_id:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        if order["status"] != "pending":
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")
            return
        
        await callback_query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞!")
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>\n"
            f"\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
            f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
            f"\n"
            f"‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–ó–∞–∑–≤–∏—á–∞–π –æ–±—Ä–æ–±–∫–∞ –∑–∞–π–º–∞—î –¥–æ 60 —Ö–≤–∏–ª–∏–Ω.\n"
            f"üì± –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        admins = await db.get_admins()
        user_info = pending_payments.get(order_id, {})
        username = user_info.get("username", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
        usd_amount = float(order['amount']) / 41
        
        admin_message = (
            f"ü™ô <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é!</b>\n"
            f"\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username}\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
            f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
            f"üíµ –°—É–º–∞ –≤ USDT: <b>{usd_amount:.2f} USDT</b>\n"
            f"ü™ô –ú–µ—Ä–µ–∂–∞: TRC20 (Tron)\n"
            f"\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è USDT —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –∞–±–æ –≤—ñ–¥—Ö–∏–ª—ñ—Ç—å –∑–∞—è–≤–∫—É:"
        )
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_crypto_{order_id}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_crypto_{order_id}")
            ]
        ])
        
        for admin_id in admins:
            try:
                await bot.send_message(admin_id, admin_message, parse_mode="HTML", reply_markup=admin_keyboard)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂—É
    @dp.callback_query(F.data.startswith("approve_crypto_"))
    async def approve_crypto_payment(callback_query):
        full_order_id = callback_query.data[len("approve_crypto_"):]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º—ñ—Å—Ç–∏—Ç—å order_id –ø—Ä–µ—Ñ—ñ–∫—Å "crypto_"
        if full_order_id.startswith("crypto_"):
            order_id = full_order_id[len("crypto_"):]
        else:
            order_id = full_order_id
            
        logger.info(f"–ê–¥–º—ñ–Ω {callback_query.from_user.id} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}, –ø–æ–≤–Ω–∏–π ID: {full_order_id}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏
        order = await db.get_payment_order(order_id)
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order}")
        
        if not order:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
            return
            
        if order["status"] != "pending":
            await callback_query.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: {order['status']}")
            return

        success = await db.approve_payment(order_id)
        if success:
            order = await db.get_payment_order(order_id)
            if order:
                usd_amount = float(order['amount']) / 41
                await callback_query.answer("‚úÖ –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—ñ–∂ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
                await callback_query.message.edit_text(
                    f"‚úÖ <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—ñ–∂ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</b>\n"
                    f"\n"
                    f"üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                    f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                    f"üíµ USDT: <b>{usd_amount:.2f} USDT</b>\n"
                    f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <code>{order['user_id']}</code>\n"
                    f"\n"
                    f"–ö–æ—à—Ç–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
                    parse_mode="HTML"
                )
                try:
                    await bot.send_message(
                        order["user_id"],
                        f"üéâ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ!</b>\n"
                        f"\n"
                        f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                        f"üí∞ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Å—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                        f"\n"
                        f"–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è! –ö–æ—à—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –ø–æ–∫—É–ø–æ–∫.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {order['user_id']}: {e}")
            else:
                await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏!")
        else:
            await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏!")

    # –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂—É
    @dp.callback_query(F.data.startswith("reject_crypto_"))
    async def reject_crypto_payment(callback_query):
        full_order_id = callback_query.data[len("reject_crypto_"):]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º—ñ—Å—Ç–∏—Ç—å order_id –ø—Ä–µ—Ñ—ñ–∫—Å "crypto_"
        if full_order_id.startswith("crypto_"):
            order_id = full_order_id[len("crypto_"):]
        else:
            order_id = full_order_id
            
        logger.info(f"–ê–¥–º—ñ–Ω {callback_query.from_user.id} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}, –ø–æ–≤–Ω–∏–π ID: {full_order_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏
        order = await db.get_payment_order(order_id)
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order}")
        
        if not order:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
            return
            
        if order["status"] != "pending":
            await callback_query.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: {order['status']}")
            return
        
        await db.reject_payment(order_id)
        order = await db.get_payment_order(order_id)
        
        if order:
            usd_amount = float(order['amount']) / 41
            await callback_query.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—ñ–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!")
            await callback_query.message.edit_text(
                f"‚ùå <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—ñ–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!</b>\n"
                f"\n"
                f"üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                f"üíµ USDT: <b>{usd_amount:.2f} USDT</b>\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <code>{order['user_id']}</code>\n"
                f"\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è USDT –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞.",
                parse_mode="HTML"
            )
            try:
                await bot.send_message(
                    order["user_id"],
                    f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞</b>\n"
                    f"\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>‚Ññ{order_id}</code>\n"
                    f"üí∞ –°—É–º–∞: <b>{order['amount']:.0f} –≥—Ä–Ω</b>\n"
                    f"\n"
                    f"–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
                    f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∞\n"
                    f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞\n"
                    f"‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ –Ω–æ–º–µ—Ä–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                    f"–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: @vktrysn",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {order['user_id']}: {e}")
        else:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏!")
