import asyncio
import os
import logging
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import get_settings
from help_text import HELP_TEXT
from db import Database
from account import register_account_handlers, get_account_menu

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

settings = get_settings()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=settings.bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database(
    host="localhost",
    port=3306,
    user="root", 
    password="20066002vV",
    db="cursepj_db"
)

# –ë—Ä–µ–Ω–¥–∏ —Ç–∞ –º–æ–¥–µ–ª—ñ
BRANDS = [
    "Nike", "Adidas", "Puma", "Reebok", "New Balance", "Vans", "Converse"
]
MODELS = {
    "Nike": ["Air Max", "Air Force", "Dunk", "Blazer", "React HyperSet"],
    "Adidas": ["Ultraboost", "Forum", "Superstar", "Stan Smith", "Gazelle"],
    "Puma": ["Suede", "RS-X", "Cali", "Future Rider", "Rider FV"],
    "Reebok": ["Classic", "Club C", "Nano", "Zig Dynamica", "Floatride"],
    "New Balance": ["574", "997", "990", "1080", "327"],
    "Vans": ["Old Skool", "Sk8-Hi", "Authentic", "Era", "Slip-On"],
    "Converse": ["Chuck 70", "All Star", "Run Star", "One Star", "Pro Leather"]
}

# –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –∫—Ä–æ—Å—ñ–≤–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±—Ä–µ–Ω–¥—É —Ç–∞ –º–æ–¥–µ–ª—ñ
PRICES = {
    "Nike": {
        "Air Max": 4200,
        "Air Force": 3600,
        "Dunk": 4300,
        "Blazer": 3200,
        "React HyperSet": 4600
    },
    "Adidas": {
        "Ultraboost": 4800,
        "Forum": 3500,
        "Superstar": 2800,
        "Stan Smith": 2600,
        "Gazelle": 2700
    },
    "Puma": {
        "Suede": 2400,
        "RS-X": 3400,
        "Cali": 2800,
        "Future Rider": 3000,
        "Rider FV": 3200
    },
    "Reebok": {
        "Classic": 2200,
        "Club C": 2600,
        "Nano": 3800,
        "Zig Dynamica": 3400,
        "Floatride": 4000
    },
    "New Balance": {
        "574": 3200,
        "997": 4800,
        "990": 5600,
        "1080": 5000,
        "327": 4000
    },
    "Vans": {
        "Old Skool": 2300,
        "Sk8-Hi": 2500,
        "Authentic": 2100,
        "Era": 2200,
        "Slip-On": 2000
    },
    "Converse": {
        "Chuck 70": 2500,
        "All Star": 2000,
        "Run Star": 2900,
        "One Star": 2400,
        "Pro Leather": 2700
    }
}

# –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def get_keyboard():
    kb = [
        [
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç–∏", callback_data="buy"),
            InlineKeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç", callback_data="account")
        ],
        [
            InlineKeyboardButton(text="–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞", callback_data="sizing"),
            InlineKeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞", callback_data="help"),
            InlineKeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="contact")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø–æ–∫—É–ø–∫–∏
def get_buy_menu():
    kb = [
        [
            InlineKeyboardButton(text="1", callback_data="buy_1"),
            InlineKeyboardButton(text="2", callback_data="buy_2"),
            InlineKeyboardButton(text="3", callback_data="buy_3")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –±—Ä–µ–Ω–¥—ñ–≤
def get_brands_menu():
    kb = [[InlineKeyboardButton(text=brand, callback_data=f"brand_{brand}")] for brand in BRANDS]
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–µ–π
def get_models_menu(brand):
    kb = [[InlineKeyboardButton(text=model, callback_data=f"model_{brand}_{model}")] for model in MODELS[brand]]
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_brands")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤
def get_sizes_menu(brand, model):
    sizes = [str(size) for size in range(36, 46)]
    kb = []
    row = []
    for i, size in enumerate(sizes, 1):
        row.append(InlineKeyboardButton(text=size, callback_data=f"size_{brand}_{model}_{size}"))
        if i % 5 == 0:
            kb.append(row)
            row = []
    if row:
        kb.append(row)
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_models_{brand}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ä–æ–∑–º—ñ—Ä–Ω–æ—ó —Å—ñ—Ç–∫–∏
def get_sizing_menu():
    kb = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–º–æ–≥–∏
def get_help_menu():
    kb = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
def get_contact_menu():
    kb = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    await db.create_user(user_id, username)

    photo_filename = "Sneekstore/botstore/coverimage.jpg"
    
    await message.answer_photo(
        photo=FSInputFile(photo_filename),
        caption=f"üñêÔ∏è –í—ñ—Ç–∞—é, <b>{username}</b>!\n\nüõçÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Sneekstore ‚Äî —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –º–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–ª—å–Ω–æ–≥–æ –≤–∑—É—Ç—Ç—è",
        reply_markup=get_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query(F.data == "buy")
async def process_buy(callback_query):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ö—É–ø–∏—Ç–∏'")
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    await callback_query.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥:",
        reply_markup=get_brands_menu()
    )
    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –±—Ä–µ–Ω–¥—É
@dp.callback_query(F.data.startswith("brand_"))
async def process_brand(callback_query):
    brand = callback_query.data.split("_", 1)[1]
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    await callback_query.message.answer(
        f"–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å {brand}:",
        reply_markup=get_models_menu(brand)
    )
    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ
@dp.callback_query(F.data.startswith("model_"))
async def process_model(callback_query):
    _, brand, model = callback_query.data.split("_", 2)
    photo_filename = f"Sneekstore/botstore/models/{brand}_{model}.jpg"
    price = PRICES.get(brand, {}).get(model, 3000)  # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—É —Ü—ñ–Ω—É –¥–ª—è –º–æ–¥–µ–ª—ñ
    caption = f"–í–∏ –æ–±—Ä–∞–ª–∏: {brand} {model}\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:"
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    # –í–∞–∂–ª–∏–≤–æ: –ù–∞–∑–∏–≤–∞–π—Ç–µ —Ñ–∞–π–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ "–ë—Ä–µ–Ω–¥_–ú–æ–¥–µ–ª—å.jpg", –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "Nike_Air Force.jpg"
    if os.path.exists(photo_filename) and photo_filename.lower().endswith(('.jpg', '.jpeg', '.png')):
        try:
            await callback_query.message.answer_photo(
                photo=FSInputFile(photo_filename),
                caption=caption,
                reply_markup=get_sizes_menu(brand, model)
            )
        except Exception:
            await callback_query.message.answer(
                caption + "\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ —Ñ–∞–π–ª –¥—ñ–π—Å–Ω–æ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º (jpg/png) —ñ –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π.",
                reply_markup=get_sizes_menu(brand, model)
            )
    else:
        await callback_query.message.answer(
            caption + "\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º.",
            reply_markup=get_sizes_menu(brand, model)
        )
    await callback_query.answer()

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–æ–¥–µ–ª–µ–π
@dp.callback_query(F.data.startswith("back_to_models_"))
async def back_to_models(callback_query):
    brand = callback_query.data.split("_", 3)[3]
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    await callback_query.message.answer(
        f"–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å {brand}:",
        reply_markup=get_models_menu(brand)
    )
    await callback_query.answer()

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±—Ä–µ–Ω–¥—ñ–≤
@dp.callback_query(F.data == "back_to_brands")
async def back_to_brands(callback_query):
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    await callback_query.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥:",
        reply_markup=get_brands_menu()
    )
    await callback_query.answer()

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback_query):
    await callback_query.answer()
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    photo_filename = "Sneekstore/botstore/coverimage.jpg"
    username = callback_query.from_user.username or callback_query.from_user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    
    await callback_query.message.answer_photo(
        photo=FSInputFile(photo_filename),
        caption=f"üñêÔ∏è –í—ñ—Ç–∞—é, <b>{username}</b>!\n\nüõçÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Sneekstore ‚Äî —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –º–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–ª—å–Ω–æ–≥–æ –≤–∑—É—Ç—Ç—è",
        reply_markup=get_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º
@dp.callback_query(F.data.in_(["buy_1", "buy_2", "buy_3"]))
async def process_buy_number(callback_query):
    number = callback_query.data.split("_")[1]
    await callback_query.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ {number}")

# –†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞
@dp.callback_query(F.data == "sizing")
async def process_sizing(callback_query):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞'")
    photo_filename = "Sneekstore/botstore/sizing.jpg"
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    await callback_query.message.answer_photo(
        photo=FSInputFile(photo_filename),
        caption="–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞",
        reply_markup=get_sizing_menu()
    )
    await callback_query.answer()

# –î–æ–ø–æ–º–æ–≥–∞
@dp.callback_query(F.data == "help")
async def process_help(callback_query):
    await callback_query.answer()
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    await callback_query.message.answer(
        HELP_TEXT,
        reply_markup=get_help_menu(),
        parse_mode="HTML"
    )

# –ö–æ–Ω—Ç–∞–∫—Ç–∏
@dp.callback_query(F.data == "contact")
async def process_contact(callback_query):
    await callback_query.answer()
    try:
        await callback_query.message.delete()
    except Exception:
        pass
    await callback_query.message.answer(
        "üìû <b>–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏</b>\n\n–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º —É Telegram: @vktrysn",
        parse_mode="HTML",
        reply_markup=get_contact_menu()
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É —Ç–∞ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query(F.data.startswith("size_"))
async def process_size(callback_query):
    _, brand, model, size = callback_query.data.split("_", 3)
    price = PRICES.get(brand, {}).get(model, 3000)  # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—É —Ü—ñ–Ω—É –¥–ª—è –º–æ–¥–µ–ª—ñ
    user_id = callback_query.from_user.id
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–∫—É–ø–∫—É
    purchase_result = await db.process_purchase(user_id, brand, model, size, price)
    
    if purchase_result["success"]:
        final_price = float(purchase_result["final_price"])
        
        await callback_query.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–∞!")
        try:
            await callback_query.message.delete()
        except Exception:
            pass
        await callback_query.message.answer(
            f"üéâ <b>–í—ñ—Ç–∞—î–º–æ –∑ –ø–æ–∫—É–ø–∫–æ—é!</b>\n\n"
            f"üì¶ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
            f"üëü –¢–æ–≤–∞—Ä: {brand} {model}\n"
            f"üìè –†–æ–∑–º—ñ—Ä: {size}\n"
            f"üí∞ –¶—ñ–Ω–∞: <b>{final_price:.0f} –≥—Ä–Ω</b>\n\n"
            f"üë®‚Äçüíº <b>–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:</b>\n"
            f"‚Ä¢ –ù–µ–∑–∞–±–∞—Ä–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            f"‚Ä¢ –ú–∏ —É—Ç–æ—á–Ω–∏–º–æ –¥–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            f"‚Ä¢ –û—á—ñ–∫—É–≤–∞–Ω–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: 1-3 –¥–Ω—ñ\n\n"
            f"üìû –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è: @vktrysn\n\n"
            f"üôè –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ Sneekstore!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")],
                [InlineKeyboardButton(text="üë§ –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="account")]
            ])
        )
    else:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤
        account = await db.get_account(user_id)
        balance = float(account['balance'])
        
        await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ!")
        await callback_query.message.answer(
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤</b>\n\n"
            f"–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É: {price} –≥—Ä–Ω\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.0f} –≥—Ä–Ω\n"
            f"–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–æ–ø–ª–∞—Ç–∏—Ç–∏: {price - balance:.0f} –≥—Ä–Ω",
            parse_mode="HTML",
            reply_markup=get_account_menu()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await db.connect()
        logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç—É
        register_account_handlers(dp, db, bot)
        
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç {bot_info.first_name} –∑–∞–ø—É—â–µ–Ω–æ")
        
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if db.pool:
            await db.close()
            logger.info("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ")
        
        await bot.session.close()
        logger.info("ü§ñ –°–µ—Å—ñ—é –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    asyncio.run(main())
