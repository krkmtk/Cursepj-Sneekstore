import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from config import get_settings

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

settings = get_settings()

bot = Bot(token=settings.bot_token)
dp = Dispatcher()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_keyboard():
    kb = [
        [
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç–∏", callback_data="buy"),
            InlineKeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç", callback_data="account")
        ],
        [InlineKeyboardButton(text="–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞", callback_data="reviews")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

def get_buy_menu():
    kb = [
        [
            InlineKeyboardButton(text="1", callback_data="buy_1"),
            InlineKeyboardButton(text="2", callback_data="buy_2"),
            InlineKeyboardButton(text="3", callback_data="buy_3")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

    photo_filename = "Sneekstore/botstore/coverimage.jpg"
    
    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        await message.answer_photo(
            photo=FSInputFile(photo_filename),
            caption="üñêÔ∏è–í—ñ—Ç–∞—é –≤ –º–∞–≥–∞–∑–∏–Ω—ñ Sneekstore",
            reply_markup=get_keyboard()
        )
    except Exception as e:
        # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ), –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—à–µ —Ç–µ–∫—Å—Ç
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        await message.answer(
            "üñêÔ∏è–í—ñ—Ç–∞—é –≤ –º–∞–≥–∞–∑–∏–Ω—ñ Sneekstore",
            reply_markup=get_keyboard()
        )

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "buy")
async def process_buy(callback_query):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ö—É–ø–∏—Ç–∏'")
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é —Ç–∞ –º–µ–Ω—é
    await callback_query.message.delete()
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ 1, 2, 3
    await callback_query.message.answer(
        "–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=get_buy_menu()
    )
    await callback_query.answer()

@dp.callback_query(F.data.in_(["buy_1", "buy_2", "buy_3"]))
async def process_buy_number(callback_query):
    number = callback_query.data.split("_")[1]
    await callback_query.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ {number}")

@dp.callback_query(F.data == "account")
async def process_account(callback_query):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ê–∫–∫–∞—É–Ω—Ç'")
    await callback_query.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç")

@dp.callback_query(F.data == "reviews")
async def process_reviews(callback_query):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–í—ñ–¥–≥—É–∫–∏'")
    await callback_query.answer("–í—ñ–¥–≥—É–∫–∏")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot_info = await bot.get_me()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
